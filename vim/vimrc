" vimrc adapted from vimified
" Author: Xavier
"
"

set nocompatible
filetype off

let mapleader = ","
let maplocalleader = "\\"

let s:dotvim = "~/.vim"

" VUNDLE {{{

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin("~/.vim/bundle")

"" let Vundle manage Vundle, required
Plugin 'vundleVim/Vundle.vim'
" }}}

" GENERAL {{{
Plugin 'embear/vim-localvimrc'
let g:localvimrc_persistent=1
" Whitelist everything
"let g:localvimrc_whitelist='/.*'

Plugin 'editorconfig/editorconfig-vim'
Plugin 'tpope/vim-endwise'
Plugin 'scrooloose/nerdtree'
" Disable the scrollbars (NERDTree)
set guioptions-=r
set guioptions-=L
" Keep NERDTree window fixed between multiple toggles
set winfixwidth

Plugin 'rking/ag.vim'

Plugin 'michaeljsmith/vim-indent-object'
let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]

Plugin 'troydm/easybuffer.vim'
nmap <leader>be :EasyBufferToggle<cr>

Plugin 'Spaceghost/vim-matchit'

Plugin 'terryma/vim-multiple-cursors'
" }}}

" AIRLINE {{{
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'



" }}}


" CODING STYLE {{{

Plugin 'martinda/Jenkinsfile-vim-syntax'
Plugin 'gtk-vim-syntax'

Plugin 'Yggdroot/indentLine'
set list lcs=tab:\|\
let g:indentLine_color_term = 111
let g:indentLine_color_gui = '#DADADA'
let g:indentLine_char = 'c'
"let g:indentLine_char = '∙▹¦'
let g:indentLine_char = '∙'

Plugin 'scrooloose/nerdcommenter'
nmap <leader># :call NERDComment(0, "invert")<cr>
vmap <leader># :call NERDComment(0, "invert")<cr>

" }}}

Plugin 'majutsushi/tagbar'
nmap <leader>t :TagbarToggle<CR>

" GIT {{{
Plugin 'gregsexton/gitv'
Plugin 'airblade/vim-gitgutter'

Plugin 'tpope/vim-fugitive'
nmap <leader>gs :Git<CR>
nmap <leader>gc :Gcommit -v<CR>
nmap <leader>gac :Gcommit --amen -v<CR>
nmap <leader>g :Ggrep
" ,gf for global git search for word under the cursor (with highlight)
nmap <leader>gf :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Ggrep -w "<C-R><C-W>"<CR>:ccl<CR>:cw<CR><CR>
" same in visual mode
:vmap <leader>gf y:let @/=escape(@", '\\[]$^*.')<CR>:set hls<CR>:silent Ggrep -F "<C-R>=escape(@", '\\"#')<CR>"<CR>:ccl<CR>:cw<CR><CR>

" }}}

"Plugin 'scrooloose/syntastic'
Plugin 'vim-syntastic/syntastic'
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['ruby', ], 'passive_filetypes': ['html', 'css', 'slim'] }
let g:syntastic_python_pylint_exe = 'python3 -m pylint -j$(nproc)'
let g:syntastic_loc_list_height = 3
let g:syntastic_rst_checkers = ['sphinx']

if !has('nvim')
Plugin 'brookhong/cscope.vim'
endif

Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'chrisbra/unicode.vim'



Plugin 'tpope/vim-repeat'
" Map YouCompleteMe shortcut
nnoremap <silent> <Plug>YcmMappingGetType :YcmCompleter GetType<CR>
            \ :call repeat#set("\<Plug>YcmMappingGetType")<CR>
nnoremap <silent> <Plug>YcmMappingFixIt :YcmCompleter FixIt<CR>
            \ :call repeat#set("\<Plug>YcmMappingFixIt")<CR>
nnoremap <silent> <Plug>YcmMappingGoTo :YcmCompleter GoTo<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoTo")<CR>
nnoremap <silent> <Plug>YcmMappingGetDoc :YcmCompleter GetDoc<CR>
            \ :call repeat#set("\<Plug>YcmMappingGetDoc")<CR>
nnoremap <silent> <Plug>YcmMappingGoToReferences :YcmCompleter GoToReferences<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoToReferences")<CR>

nnoremap <silent> <Plug>YcmMappingGoToDeclaration :YcmCompleter GoToDeclaration<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoToDeclaration")<CR>

nnoremap <silent> <Plug>YcmMappingGoToDefinition :YcmCompleter GoToDefinition<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoToDefinition")<CR>

nnoremap <silent> <Plug>YcmMappingGoToCallees :YcmCompleter GoToCallees<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoToCallees")<CR>

nnoremap <silent> <Plug>YcmMappingGoToCallers :YcmCompleter GoToCallers<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoToCallers")<CR>

nnoremap <silent> <Plug>YcmMappingGoToInclude :YcmCompleter GoToInclude<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoToInclude")<CR>

nnoremap <silent> <Plug>YcmMappingGoToImplementation :YcmCompleter GoToImplementation<CR>
            \ :call repeat#set("\<Plug>YcmMappingGoToImplementation")<CR>


nmap <leader>ygt   <Plug>YcmMappingGetType
nmap <leader>ygT   <Plug>YcmMappingGetType
nmap <leader>yfi   <Plug>YcmMappingFixIt
nmap <leader>yfI   <Plug>YcmMappingFixIt
nmap <leader>ygd   <Plug>YcmMappingGoToDefinition
nmap <leader>ygD   <Plug>YcmMappingGoToDeclaration
nmap <leader>ygc   <Plug>YcmMappingGoToCallees
nmap <leader>ygC   <Plug>YcmMappingGoToCallers
nmap <leader>ygI   <Plug>YcmMappingGoToInclude
nmap <leader>ygi   <Plug>YcmMappingGoToImplementation
nmap <leader>ysD   <Plug>YcmMappingGetDoc
nmap <leader>ysd   <Plug>YcmMappingGetDoc
nmap <leader>ygr   <Plug>YcmMappingGoToReferences
nmap <leader>ygR   <Plug>YcmMappingGoToReferences
nnoremap <leader>ygS
            \ :<C-u>execute 'YcmCompleter GoToSymbol '.input('Symbol: ')<CR>
nnoremap <leader>ygs
            \ :<C-u>execute 'YcmCompleter GoToSymbol '.input('Symbol: ')<CR>

nmap <leader>D <Plug>(YCMHover)
nmap <localleader>yfw <Plug>(YCMFindSymbolInWorkspace)
nmap <localleader>yfd <Plug>(YCMFindSymbolInDocument)
augroup CustYCMHover
  autocmd!
  autocmd FileType c,cpp,objc let b:ycm_hover = {
        \ 'command': 'GetDoc',
        \ 'syntax': &syntax
        \ }
augroup END

nmap <leader>p :pclose!<cr>

nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
nnoremap <leader>fl :call ToggleLocationList()<CR>

" s: Find this C symbol
nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
" d: Find functions called by this function
nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
" t: Find this text string
nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
" e: Find this egrep pattern
nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
" f: Find this file
nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
" i: Find files #including this file
nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>


"    Plugin 'klen/python-mode'
"    Plugin 'python.vim'
"    Plugin 'python_match.vim'
"    Plugin 'pythoncomplete'
"    Plugin 'jmcantrell/vim-virtualenv'
"

Plugin 'vivien/vim-linux-coding-style'
let g:linuxsty_patterns = [ "/usr/src/", "/linux", "bsp/linux", "isp/dw100" ]

Plugin 'rhysd/vim-clang-format'

"Plugin 'ryanoasis/vim-devicons'

call vundle#end()

filetype plugin indent on

syntax on

" Set 5 lines to the cursor - when moving vertically
set scrolloff=0

" It defines where to look for the buffer user demanding (current window, all
" windows in other tabs, or nowhere, i.e. open file from scratch every time) and
" how to open the buffer (in the new split, tab, or in the current window).

" This orders Vim to open the buffer.
set switchbuf=useopen

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" You want to be part of the gurus? Time to get in serious stuff and stop using
" arrow keys.
"noremap <left> <nop>
"noremap <up> <nop>
"noremap <down> <nop>
"noremap <right> <nop>

" Yank from current cursor position to end of line
map Y y$
" Yank content in OS's clipboard. `o` stands for "OS's Clipoard".
vnoremap <leader>yo "*y
" Paste content from OS's clipboard
nnoremap <leader>po "*p

" clear highlight after search
noremap <silent><Leader>/ :nohls<CR>

" better ESC
inoremap <C-k> <Esc>

nmap <silent> <leader>hh :set invhlsearch<CR>
nmap <silent> <leader>ll :set invlist<CR>
nmap <silent> <leader>nn :set invnumber<CR>
nmap <silent> <leader>pp :set invpaste<CR>
nmap <silent> <leader>ii :set invrelativenumber<CR>

" Seriously, guys. It's not like :W is bound to anything anyway.
command! W :w

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Source current line
vnoremap <leader>L y:execute @@<cr>
" Source visual selection
nnoremap <leader>L ^vg_y:execute @@<cr>

" Fast saving and closing current buffer without closing windows displaying the
" buffer
nmap <leader>wq :w!<cr>:Bclose<cr>

set autoread
set backspace=indent,eol,start
set binary
set cinoptions=:0,(s,u0,U1,g0,t0
set completeopt=menuone,preview
set encoding=utf-8
"set guifont=DroidSansMono\ Nerd\ Font\ 11
set guifont=Siji
set hidden
set history=1000
set incsearch
set laststatus=2
set list

" Don't redraw while executing macros
set nolazyredraw

" Disable the macvim toolbar
set guioptions-=T

set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:␣
set showbreak=↪

set notimeout
set ttimeout
set ttimeoutlen=10

" _ backups {{{
if has('persistent_undo')
  " undo files
  exec 'set undodir='.s:dotvim.'/tmp/undo//'
  set undofile
  set undolevels=3000
  set undoreload=10000
endif
" backups
exec 'set backupdir='.s:dotvim.'/tmp/backup//'
" swap files
exec 'set directory='.s:dotvim.'/tmp/swap//'
set backup
set noswapfile
" _ }}}

set modelines=0
set noeol
if exists('+relativenumber')
  set relativenumber
endif
set numberwidth=3
set winwidth=83
set ruler
set showcmd
set exrc
set secure
set matchtime=2
set completeopt=longest,menuone,preview

" White characters {{{
set autoindent
set tabstop=4
set softtabstop=4
set textwidth=80
set shiftwidth=4
set noexpandtab
set wrap
set formatoptions=qrn1
if exists('+colorcolumn')
  set colorcolumn=+1
endif
set cpo+=J
" }}}

set visualbell

set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,.DS_Store,*.aux,*.out,*.toc,tmp,*.scssc
set wildmenu

set dictionary=/usr/share/dict/words

" Triggers {{{

" Save when losing focus
au FocusLost    * :silent! wall
"
" When vimrc is edited, reload it
autocmd! BufWritePost vimrc source $MYVIMRC

" }}}

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave * set nocursorline
    au WinEnter * set cursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
augroup END
" }}}

" Trailing whitespace {{{
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:␣
    au InsertLeave * :set listchars+=trail:␣
augroup END

" Remove trailing whitespaces when saving
" Wanna know more? http://vim.wikia.com/wiki/Remove_unwanted_spaces
" If you want to remove trailing spaces when you want, so not automatically,
" see
" http://vim.wikia.com/wiki/Remove_unwanted_spaces#Display_or_remove_unwanted_whitespace_with_a_script.
autocmd BufWritePre * :%s/\s\+$//e

" }}}

" . searching {{{

" sane regexes
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set showmatch
set gdefault
set hlsearch

" clear search matching
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" Don't jump when using * for search
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>? :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Highlight word {{{
nnoremap <silent> <leader>hh :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h1 :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h2 :execute '2match InterestingWord2 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h3 :execute '3match InterestingWord3 /\<<c-r><c-w>\>/'<cr>
" }}}

" }}}

" Navigation & UI {{{

" more natural movement with wrap on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Easy splitted window navigation
noremap <C-h>  <C-w>h
noremap <C-j>  <C-w>j
noremap <C-k>  <C-w>k
noremap <C-l>  <C-w>l

" Easy buffer navigation
noremap <leader>bp :bprevious<cr>
noremap <leader>bn :bnext<cr>

" Splits ,v and ,h to open new splits (vertical and horizontal)
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Bubbling lines
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

nmap <tab> :NERDTreeToggle<cr>

" }}}

" . folding {{{

set foldlevelstart=0
set foldmethod=syntax

" Space to toggle folds.
nnoremap <space> za
vnoremap <space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>z zMzvzz

" }}}

" Vim {{{
augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}
"

" Spell

set spell spelllang=en_us
set nospell